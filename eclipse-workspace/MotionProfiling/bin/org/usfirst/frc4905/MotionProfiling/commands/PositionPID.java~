// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.MotionProfiling.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import java.util.Vector;

import org.usfirst.frc4905.MotionProfiling.Robot;

import Utilities.Trace;

/**
 *
 */
public class PositionPID extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double m_PIDOut;
	Vector<String> m_header = new Vector<String>();
	double m_initialCurrentPosition;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public PositionPID() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    		Robot.driveTrain.setControlModePercentVbus();
    		Robot.driveTrain.initializePositionPID();
    		Vector<String> header = new Vector<String>();
    		header.add(new String("Setpoint"));
    		header.add(new String("Position"));
    		header.add(new String("iTerm"));
    		header.add(new String("dTerm"));
    		header.add(new String("pTerm"));
    		header.add(new String("PIDOut"));
    		
    		Trace.getInstance().addTrace("PositionPIDTesting", header);
    		m_header = header;
    		m_initialCurrentPosition = Robot.driveTrain.getEncoderPosition();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    		double PIDOut = Robot.driveTrain.getPositionPIDOut(m_initialCurrentPosition + 100);
    		m_PIDOut = PIDOut;
    		Vector<Double> entry = new Vector<Double>();
    		if(PIDOut > 1.0) {
    			Robot.driveTrain.setAllDriveControllers(1.0);
    		}else {
    			Robot.driveTrain.setAllDriveControllers(PIDOut);
    		}
    		entry.add(new Double(100));
    		entry.addElement(new Double(Robot.driveTrain.getEncoderPosition()));
    		entry.add(new Double(Robot.driveTrain.getITerm()));
    		entry.add(new Double(Robot.driveTrain.getDTerm()));
    		entry.add(new Double(Robot.driveTrain.getPTerm()));
    		entry.add(new Double(PIDOut));
    		
    		Trace.getInstance().addEntry("PositionPIDTesting", entry);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    		Robot.driveTrain.setAllDriveControllers(0.0);
    		Trace.getInstance().flushTraceFiles();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    		end();
    }
}
