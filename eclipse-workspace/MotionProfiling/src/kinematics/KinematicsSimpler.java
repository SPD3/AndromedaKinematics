package kinematics;

import java.util.Vector;

public class KinematicsSimpler {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private KinematicsSimpler m_instance;

	public KinematicsSimpler getInstance() {
		if (m_instance == null) {
			m_instance = new KinematicsSimpler();
		}
		return m_instance;
	}

	private static double m_trajectoryPointInterval = 1.0;

	public static double getTrajectoryPointInterval() {
		return m_trajectoryPointInterval;
	}

	public class InvalidDimentionException extends Exception {

		private static final long serialVersionUID = 1L;

		public InvalidDimentionException(String message) {
			super(message);
		}
	}

	public class Path extends TrajectoryPaths {

		Vector<Point> setpointVector = new Vector<Point>();

		public Vector<Point> getSetpointVector() {
			return setpointVector;
		}

		int setPointDimention = 0;

	}

	private class TrajectoryPaths {
		double maxVelocity;
		double maxAcceleration;
		double maxJerk;

		public double getMaxVelocity() {
			return maxVelocity;
		};

		public double getMaxAcceleration() {
			return maxAcceleration;
		};

		public double getMaxJerk() {
			return maxJerk;
		}
	}

	public class TrajectoryPoint {
		public TrajectoryPoint(double currentVelocity, double position, double timestamp) {
			m_currentVelocity = currentVelocity;
			m_timestamp = timestamp;
			m_position = position;
		}

		public TrajectoryPoint() {

		}

		public double m_currentVelocity, m_timestamp, m_position = 0.0;

	}

	public class Point {
		public Point(double x) {
			m_x = x;
			m_values = new double[1];
			m_values[0] = x;
			m_dim = 1;
		}

		public Point(double x, double y) {
			m_x = x;
			m_y = y;
			m_values = new double[2];
			m_values[0] = x;
			m_values[1] = y;
			m_dim = 2;
		}

		public int getDim() {
			return m_dim;
		}

		public double getm_X() {
			return m_x;
		}

		public double getm_Y() {
			return m_y;
		}

		public double getMaxVelocity() {
			return maxVelocity;
		}

		double startVelocityCruisingDeltaTime;
		double endVelocityCruisingDeltaTime;

		double firstStartAccelerationCruisingDeltaTime;
		double firstEndAccelerationCruisingDeltaTime;
		double secondStartAccelerationCruisingDeltaTime;
		double secondEndAccelerationCruisingDeltaTime;

		double endDeltaTime;
		double maxVelocity;
		
		double maxAcceleration;
		public double getEndDeltaTime() {
			return endDeltaTime;
		}

		private double m_x, m_y = 0.0;
		private double[] m_values;
		private int m_dim;

		double vi = 0.0;
		double vf = 0.0;

	}

	/**
	 * Takes a point and tries to add it to the setpoint vector inside of Key
	 * 
	 * @throws InvalidDimentionException
	 */
	public void addPointToPath(Path Key, Point point) throws InvalidDimentionException {
		privateAddPointToPath(Key, point, 0);
	}

	/**
	 * Takes a point and tries to add it to the setpoint vector inside of Key. Takes
	 * the max velocity that the user wants and adds it to a max velocity vector
	 * that will be used later on
	 * 
	 * @throws InvalidDimentionException
	 */
	public void addPointToPath(Path Key, Point point, double maxVelocity) throws InvalidDimentionException {
		privateAddPointToPath(Key, point, maxVelocity);
	}

	/**
	 * Tries to add a point to the setpoint path inside of Key Throws an exception
	 * if the point is not the same dimension as all the other points inside of the
	 * setpoint vector
	 */
	private void privateAddPointToPath(Path Key, Point point, double maxVelocity) throws InvalidDimentionException {
		// If the dimension of the path vector has not been set yet set it to the
		// dimension of the point
		if (Key.setPointDimention == 0) {
			Key.setPointDimention = point.getDim();
			// If the dimension of the point does not match the dimension of the path vector
			// throw an exception
		} else if (point.getDim() != point.getDim()) {
			String errMessage;
			if (point.getDim() == 1) {
				errMessage = "Point: (" + point.m_x + "," + point.m_y + ") is an invalid dimention.";
			} else {
				errMessage = "Point: (" + point.m_x + ") is an invalid dimention.";
			}
			InvalidDimentionException invalidDimentionException = new InvalidDimentionException(errMessage);
			throw invalidDimentionException;
		}

		if (point.getDim() == 2) {
			splineFitNewPoints(Key);
		}
		point.maxVelocity = maxVelocity;
		Key.setpointVector.add(point);
	}

	/**
	 * This method takes a two dimensional setpoint vector and uses some sort of
	 * spline fitting to create a path from one setpoint to another
	 */
	private void splineFitNewPoints(Path Key) {

	}

	/**
	 * This method takes the setpoint vector and turns it into a trajectory vector
	 * by time parameterizing each setpoint
	 */
	public void createTrajectory(Path Key, double maxVelocity, double maxAcceleration, double maxJerk) {
		Key.maxAcceleration = maxAcceleration;
		Key.maxVelocity = maxVelocity;
		Key.maxJerk = maxJerk;

		/*
		 * If the dimension of the vector is 2 numerically integrate the path to create
		 * two separate 1 dimensional paths Else add the another layer of vector onto
		 * this setpoint vector to keep everything uniform later on
		 */

		// For every setpoint vector in the vector of setpoint vectors

		Vector<Point> setpointVector = Key.setpointVector;

		// Final velocity and Initial Velocity are commonly referred to as vi and vf
		// respectively
		getFinalVelocityAndInitialVelocity(setpointVector, Key);

		// For every point in this setpoint vector

		for (int i1 = 0; i1 < setpointVector.size(); i1++) {

			Point setpoint = setpointVector.get(i1);

			/*
			 * This equation pretend that the initial velocity and the final velocities are
			 * both 0, calculates the total distance covered if their was no velocity limit
			 * and then cuts that number in half in order to find the distance traveled at
			 * the peek of velocity before the trajectory starts to decelerate
			 */
			Point lastSetpoint = new Point(0, 0);
			try {
				lastSetpoint = setpointVector.get(i1 - 1);

			} catch (ArrayIndexOutOfBoundsException a) {

			}
			double distance = Math.abs(setpoint.m_x - lastSetpoint.m_x);
			double jerkTime = Key.maxAcceleration / Key.maxJerk;
			double startAccelerationCruisingDistanceCovered = (1.0 / 6.0) * Key.maxJerk * Math.pow(jerkTime, 3);
			double jerkVelocityCovered = 0.5 * Key.maxJerk * Math.pow(jerkTime, 2);
			double maxAccelerationCruisingVelocityCovered = Key.maxVelocity - (jerkVelocityCovered);

			double testEndAccelerationCruisingDistanceCovered = ((Math.pow(maxAccelerationCruisingVelocityCovered, 2)
					- Math.pow(jerkVelocityCovered, 2)) / (2 * Key.maxAcceleration));
			double endAccelerationCruisingDistanceCovered = testEndAccelerationCruisingDistanceCovered
					+ startAccelerationCruisingDistanceCovered;

			double startVelocityCruisingDistanceCovered = endAccelerationCruisingDistanceCovered
					+ maxAccelerationCruisingVelocityCovered * jerkTime
					+ 0.5 * Key.maxAcceleration * Math.pow(jerkTime, 2) - (Key.maxJerk * Math.pow(jerkTime, 3)) / 6.0;

			/*
			 * This equation is the kinematic equation involving vf, vi, acceleration and
			 * time and has been rearranged to solve for the time in which it will take to
			 * reach the theoretical max velocity
			 */

			double jerkDistanceCovered = (1.0 / 6.0) * Key.maxJerk * Math.pow(jerkTime, 3);
			double justJerkDistanceCovered = jerkVelocityCovered * jerkTime
					+ 0.5 * Key.maxAcceleration * Math.pow(jerkTime, 2);

			/*
			 * If the theoretical max velocity is impossible to reach due to design
			 * constraints or user constraints that limit max velocity find when the max
			 * velocity will be reached and how long it will stay or "cruise" at that
			 * velocity before it needs to decelerate down to reach the vf
			 * 
			 * Else set the distance cruising to 0 and all the times associated with
			 * cruising to the halfway time which is when the maximum theoretical velocity
			 * will be reached and pretend that you are cruising for 0 seconds
			 */
			try {
			if (Key.setpointVector.get(0).m_x == 0 && Key.setpointVector.get(1).m_x == 0.0) {
				System.out.println("startVelocityCruisingDistanceCovered: " + startVelocityCruisingDistanceCovered);
				System.out.println("distance: " + distance);
			}
			}catch(ArrayIndexOutOfBoundsException a) {
				
			}
			if (2 * startVelocityCruisingDistanceCovered <= distance) {
				double velocityCoveredAtMaxAcceleration = setpoint.maxVelocity - (2 * jerkVelocityCovered);

				setpoint.firstStartAccelerationCruisingDeltaTime = maxAcceleration / Key.maxJerk;

				setpoint.firstEndAccelerationCruisingDeltaTime = velocityCoveredAtMaxAcceleration / Key.maxAcceleration
						+ setpoint.firstStartAccelerationCruisingDeltaTime;

				setpoint.startVelocityCruisingDeltaTime = setpoint.firstEndAccelerationCruisingDeltaTime
						+ setpoint.firstStartAccelerationCruisingDeltaTime;

				double firstStartAccelerationCruisingJerkDistanceCovered = (1.0 / 6.0) * maxJerk
						* Math.pow(setpoint.firstStartAccelerationCruisingDeltaTime, 3);
				double distanceCoveredAtMaxAcceleration = jerkVelocityCovered
						* (setpoint.firstEndAccelerationCruisingDeltaTime
								- setpoint.firstStartAccelerationCruisingDeltaTime)
						+ 0.5 * Key.maxAcceleration * Math.pow((setpoint.firstEndAccelerationCruisingDeltaTime
								- setpoint.firstStartAccelerationCruisingDeltaTime), 2);
				double firstEndAccelerationCruisingVelocity = jerkVelocityCovered
						+ maxAcceleration * (setpoint.firstEndAccelerationCruisingDeltaTime
								- setpoint.firstStartAccelerationCruisingDeltaTime);
				double startVelocityCruisingEndAccelerationCruisingDeltaTime = setpoint.startVelocityCruisingDeltaTime
						- setpoint.firstEndAccelerationCruisingDeltaTime;
				double firstStartVelocityCruisingJerkDistanceCovered = firstEndAccelerationCruisingVelocity
						* startVelocityCruisingEndAccelerationCruisingDeltaTime
						+ 0.5 * Key.maxAcceleration * Math.pow(startVelocityCruisingEndAccelerationCruisingDeltaTime, 2)
						- (1.0 / 6.0) * maxJerk * Math.pow(startVelocityCruisingEndAccelerationCruisingDeltaTime, 3);
				double distanceAccelerating = firstStartAccelerationCruisingJerkDistanceCovered
						+ firstStartVelocityCruisingJerkDistanceCovered + distanceCoveredAtMaxAcceleration;

				double distanceCruising = Math.abs(setpoint.m_x - lastSetpoint.m_x) - 2 * distanceAccelerating;
				double timeCruising = Math.abs(distanceCruising / Key.maxVelocity);

				setpoint.endVelocityCruisingDeltaTime = setpoint.startVelocityCruisingDeltaTime + timeCruising;
				setpoint.secondStartAccelerationCruisingDeltaTime = setpoint.endVelocityCruisingDeltaTime
						+ maxAcceleration / Key.maxJerk;
				setpoint.secondEndAccelerationCruisingDeltaTime = setpoint.secondStartAccelerationCruisingDeltaTime
						+ velocityCoveredAtMaxAcceleration / Key.maxAcceleration;
				setpoint.endDeltaTime = setpoint.secondEndAccelerationCruisingDeltaTime + maxAcceleration / Key.maxJerk;
				setpoint.maxAcceleration = Key.maxAcceleration;
				try {
				if (Key.setpointVector.get(0).m_x == 0.0 && Key.setpointVector.get(1).m_x == 0.0) {
					
					System.out.println("setpoint.firstStartAccelerationCruisingDeltaTime: "
							+ setpoint.firstStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.firstEndAccelerationCruisingDeltaTime: "
							+ setpoint.firstEndAccelerationCruisingDeltaTime);
					System.out.println(
							"setpoint.startVelocityCruisingDeltaTime: " + setpoint.startVelocityCruisingDeltaTime);
					System.out
							.println("setpoint.endVelocityCruisingDeltaTime: " + setpoint.endVelocityCruisingDeltaTime);
					System.out.println("setpoint.secondStartAccelerationCruisingDeltaTime: "
							+ setpoint.secondStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.secondEndAccelerationCruisingDeltaTime: "
							+ setpoint.secondEndAccelerationCruisingDeltaTime);
					System.out.println("setpoint.endDeltaTime: " + setpoint.endDeltaTime);
					System.out.println("");
					System.out.println("jerkTime: " + jerkTime);
					}
				}catch(ArrayIndexOutOfBoundsException a) {
					
				}
			} else if (2 * justJerkDistanceCovered <=distance) {
				setpoint.firstStartAccelerationCruisingDeltaTime = jerkTime;
				double firstStartAccelerationVelocityCovered = maxAcceleration / 2 * jerkTime;
				double maxVelocityDistance = Math.abs(setpoint.m_x / 2);
				double distanceAtMaxAccelerationAndSecondJerkDistance = maxVelocityDistance - jerkDistanceCovered;

				double cTerm = -1 * (distanceAtMaxAccelerationAndSecondJerkDistance
						- (0.5 * Key.maxAcceleration * Math.pow(jerkTime, 2))
						- ((1.0 / 6.0) * (-1 * Key.maxJerk) * Math.pow(jerkTime, 3))
						- (jerkTime * firstStartAccelerationVelocityCovered));
				double aTerm = 0.5 * Key.maxAcceleration;
				double bTerm = firstStartAccelerationVelocityCovered + Key.maxAcceleration * jerkTime;

				double accelerationTime = (-bTerm + Math.sqrt(Math.pow(bTerm, 2) - (4 * aTerm * cTerm))) / (2 * aTerm);
				double accelerationVelocityCovered = Key.maxAcceleration * accelerationTime;
				setpoint.firstEndAccelerationCruisingDeltaTime = jerkTime + accelerationTime;
				setpoint.startVelocityCruisingDeltaTime = setpoint.firstEndAccelerationCruisingDeltaTime + jerkTime;
				setpoint.endVelocityCruisingDeltaTime = setpoint.startVelocityCruisingDeltaTime;
				setpoint.maxVelocity = 2 * jerkVelocityCovered + accelerationVelocityCovered;
				setpoint.secondStartAccelerationCruisingDeltaTime = setpoint.endVelocityCruisingDeltaTime + jerkTime;
				setpoint.secondEndAccelerationCruisingDeltaTime = setpoint.secondStartAccelerationCruisingDeltaTime
						+ accelerationTime;
				setpoint.endDeltaTime = setpoint.secondEndAccelerationCruisingDeltaTime + jerkTime;
				setpoint.maxAcceleration = Key.maxAcceleration;
				// I HAVE TO COMMENT THIS UP EXPLAINGING WHAT IS HAPPENING!!!!!!!!
				if (setpoint.m_x == 0.0) {
					System.out.println("");
					System.out.println("initialJerkDistanceCovered: " + jerkDistanceCovered);
					System.out.println("AccelerationDistanceCovered: " + (jerkVelocityCovered * accelerationTime
							+ 0.5 * Key.maxAcceleration * Math.pow(accelerationTime, 2)));
					System.out.println("secondJerkDistanceCovered: "
							+ ((jerkVelocityCovered + accelerationVelocityCovered) * jerkTime
									+ 0.5 * Key.maxAcceleration * Math.pow(jerkTime, 2)
									+ (-1.0 / 6.0) * Key.maxJerk * Math.pow(jerkTime, 3)));

					System.out.println("Total Distance Covered: " + (jerkDistanceCovered
							+ (jerkVelocityCovered * accelerationTime
									+ 0.5 * Key.maxAcceleration * Math.pow(accelerationTime, 2))
							+ ((jerkVelocityCovered + accelerationVelocityCovered) * jerkTime
									+ 0.5 * Key.maxAcceleration * Math.pow(jerkTime, 2)
									+ (-1.0 / 6.0) * Key.maxJerk * Math.pow(jerkTime, 3))));
					System.out.println("jerkVelocityCovered: " + jerkVelocityCovered);
					System.out.println("accelerationVelocityCovered: " + accelerationVelocityCovered);
					System.out.println("accelerationTime: " + accelerationTime);
					System.out.println("");
					System.out.println("distanceAtMaxAccelerationAndSecondJerkDistance: "
							+ distanceAtMaxAccelerationAndSecondJerkDistance);
					System.out
							.println("firstStartAccelerationVelocityCovered: " + firstStartAccelerationVelocityCovered);
					System.out.println("cTerm: " + cTerm);
					System.out.println("aTerm: " + aTerm);
					System.out.println("bTerm: " + bTerm);
					System.out.println("");
					System.out.println("setpoint.firstStartAccelerationCruisingDeltaTime: "
							+ setpoint.firstStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.firstEndAccelerationCruisingDeltaTime: "
							+ setpoint.firstEndAccelerationCruisingDeltaTime);
					System.out.println(
							"setpoint.startVelocityCruisingDeltaTime: " + setpoint.startVelocityCruisingDeltaTime);
					System.out
							.println("setpoint.endVelocityCruisingDeltaTime: " + setpoint.endVelocityCruisingDeltaTime);
					System.out.println("setpoint.secondStartAccelerationCruisingDeltaTime: "
							+ setpoint.secondStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.secondEndAccelerationCruisingDeltaTime: "
							+ setpoint.secondEndAccelerationCruisingDeltaTime);
					System.out.println("setpoint.endDeltaTime: " + setpoint.endDeltaTime);
					System.out.println("");
				}
			} else {
				double maxVelocityDistance = Math.abs(distance / 2);
				jerkTime = Math.cbrt(maxVelocityDistance / Key.maxJerk);
				/*
				 * 1/6*J*T^3 + vi*T + 1/2*A*T^2 + 1/6*-J*T^3 = distance
				 * 
				 * vi*T + 1/2*A*T^2 = distance
				 * 
				 * vi = 1/2*J*T^2
				 * 
				 * A = J*T
				 * 
				 * 1/2*J*T^2 * T + 1/2*J*T*T^2 = distance
				 * 
				 * 1/2*J*T^3 + 1/2*J*T^3 =distance
				 * 
				 * 1/2*J*T^3 = distance/2
				 * 
				 * J*T^3 = distance/2 * 2
				 * 
				 * J*T^3 = distance
				 * 
				 * T^3 = distance/J
				 * 
				 * T = cbrt(distance/J)
				 */
				setpoint.firstStartAccelerationCruisingDeltaTime = jerkTime;
				setpoint.firstEndAccelerationCruisingDeltaTime = setpoint.firstStartAccelerationCruisingDeltaTime;
				setpoint.startVelocityCruisingDeltaTime = setpoint.firstStartAccelerationCruisingDeltaTime + jerkTime;
				setpoint.endVelocityCruisingDeltaTime = setpoint.startVelocityCruisingDeltaTime ;
				setpoint.secondStartAccelerationCruisingDeltaTime = setpoint.endVelocityCruisingDeltaTime + jerkTime;
				setpoint.secondEndAccelerationCruisingDeltaTime = setpoint.secondStartAccelerationCruisingDeltaTime;
				setpoint.endDeltaTime = setpoint.secondEndAccelerationCruisingDeltaTime + jerkTime;
				double velocityCoveredByNewJerkTime = 0.5*Key.maxJerk*Math.pow(jerkTime, 2);
				setpoint.maxVelocity = 2*velocityCoveredByNewJerkTime;
				setpoint.maxAcceleration = Key.maxJerk*jerkTime;
				
				double distanceCoveredDuringFirstJerkTime = (1.0/6.0)*Key.maxJerk*Math.pow(jerkTime, 3);
				double jerkVi = 0.5*Key.maxJerk*Math.pow(jerkTime, 2);
				double jerkAcceleration = Key.maxJerk*jerkTime;
				double distanceCoveredDuringSecondJerkTime = jerkVi*jerkTime + 0.5*jerkAcceleration*Math.pow(jerkTime, 2) + (1.0/6.0)*(-1*Key.maxJerk)*Math.pow(jerkTime, 3);
				
				if (setpoint.m_x == 0.0) {
					
					System.out.println("setpoint.firstStartAccelerationCruisingDeltaTime: "
							+ setpoint.firstStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.firstEndAccelerationCruisingDeltaTime: "
							+ setpoint.firstEndAccelerationCruisingDeltaTime);
					System.out.println(
							"setpoint.startVelocityCruisingDeltaTime: " + setpoint.startVelocityCruisingDeltaTime);
					System.out
							.println("setpoint.endVelocityCruisingDeltaTime: " + setpoint.endVelocityCruisingDeltaTime);
					System.out.println("setpoint.secondStartAccelerationCruisingDeltaTime: "
							+ setpoint.secondStartAccelerationCruisingDeltaTime);
					System.out.println("setpoint.secondEndAccelerationCruisingDeltaTime: "
							+ setpoint.secondEndAccelerationCruisingDeltaTime);
					System.out.println("setpoint.endDeltaTime: " + setpoint.endDeltaTime);
					System.out.println("");
					System.out.println("jerkTime: " + jerkTime);
					System.out.println("jerkVi: " + jerkVi);
					System.out.println("jerkAcceleration: " + jerkAcceleration);
					System.out.println("distanceCoveredDuringFirstJerkTime: " + distanceCoveredDuringFirstJerkTime);
					System.out.println("distanceCoveredDuringSecondJerkTime: " + distanceCoveredDuringSecondJerkTime);
					System.out.println("Total Distance: " + (distanceCoveredDuringFirstJerkTime+distanceCoveredDuringSecondJerkTime));
				}
			}

			// Needs to do this so that the last time through the code the max velocity is
			// not left at some obscure value

			Key.maxVelocity = maxVelocity;

		}

	}

	private void getFinalVelocityAndInitialVelocity(Vector<Point> setpointVector, Path Key) {

		// For every point inside of the setpoint vector

		for (int i1 = 0; i1 < setpointVector.size(); i1++) {
			boolean traveledInAPositiveDirection;
			boolean willTravelInAPositiveDirection;

			Point setpoint = setpointVector.get(i1);

			if (setpoint.maxVelocity >= Key.maxVelocity || setpoint.maxVelocity <= 0.0) {
				setpoint.maxVelocity = Key.maxVelocity;
			}

			/*
			 * If this is the first setpoint being looked at set the vi to 0.0
			 * 
			 * Else set vi to the vf of the last setpoint looked at
			 */
			if (i1 == 0) {
				setpoint.vi = 0.0;
			} else {
				setpoint.vi = setpointVector.get(i1 - 1).vf;
			}

			/*
			 * If this is the first setpoint being looked at set
			 * traveledInAPositiveDirection according to whether or not setpoint is positive
			 * or negative
			 * 
			 * Else if the setpoint is greater than the last setpoint set
			 * traveledInAPositiveDirection to true
			 * 
			 * Else set traveledInAPositiveDirection to false
			 */
			if (i1 == 0) {
				if (setpoint.m_x > 0) {
					traveledInAPositiveDirection = true;
				} else {
					traveledInAPositiveDirection = false;
				}
			} else if (setpoint.m_x > setpointVector.get(i1 - 1).m_x) {
				traveledInAPositiveDirection = true;
			} else {
				traveledInAPositiveDirection = false;
			}

			/*
			 * If this is the very last setpoint willTravelInAPositiveDirection does not
			 * matter so set it to false
			 * 
			 * Else if this setpoint is greater than the next setpoint set
			 * willTravelInAPositiveDirection to false
			 * 
			 * Else set willTravelInAPositiveDirection to true
			 */
			if (i1 == (setpointVector.size() - 1)) {
				willTravelInAPositiveDirection = false;
			} else if (setpoint.m_x > setpointVector.get(i1 + 1).m_x) {
				willTravelInAPositiveDirection = false;
			} else {
				willTravelInAPositiveDirection = true;
			}

			/*
			 * If this is the final setpoint in the vector you want the final velocity to be
			 * 0 so set vf to 0
			 * 
			 * Else if you have been traveling in a positive direction and you will continue
			 * traveling in a positive direction or you have been traveling in a negative
			 * direction and you will continue traveling in a negative direction calculate
			 * whether or not you have to slow down when going to the current setpoint in
			 * order to prepare to reach the other setpoints
			 * 
			 * Else you will be reversing direction so your vf will be 0.0
			 */
			Point nextSetpoint = new Point(0, 0);
			try {
				nextSetpoint = setpointVector.get(i1 + 1);

			} catch (ArrayIndexOutOfBoundsException a) {

			}
			Point previousSetpoint = new Point(0, 0);
			try {
				previousSetpoint = setpointVector.get(i1 - 1);

			} catch (ArrayIndexOutOfBoundsException a) {

			}
			if (nextSetpoint.maxVelocity >= Key.maxVelocity || nextSetpoint.maxVelocity <= 0.0) {
				nextSetpoint.maxVelocity = Key.maxVelocity;
			}

			double distanceTraveledWhileAcceleratingToMaxVelocityFromVi = (Math.pow(setpoint.maxVelocity, 2)
					- Math.pow(setpoint.vi, 2)) / (2 * Key.maxAcceleration);
			double deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint = Math
					.abs(setpoint.m_x - previousSetpoint.m_x);
			if (distanceTraveledWhileAcceleratingToMaxVelocityFromVi > deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint) {
				setpoint.vf = Math.sqrt(Math.abs(Math.pow(setpoint.vi, 2)
						+ 2 * Key.maxAcceleration * deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint));

			} else {
				setpoint.vf = setpoint.maxVelocity;
			}
			setpoint.vf = Math.abs(setpoint.vf);

			if (i1 == (setpointVector.size() - 1)) {
				setpoint.vf = 0.0;
			} else if ((traveledInAPositiveDirection && willTravelInAPositiveDirection)
					|| (!traveledInAPositiveDirection && !willTravelInAPositiveDirection)) {

				double distanceCoveredWhileAcceleratingToMaxVelocity = getDistanceTraveledWhileAccelerating(0.0,
						setpoint.maxVelocity, Key.maxAcceleration);
				Point previousPoint = setpoint;
				Vector<Point> possibleFinalVelocityDeterminingSetpoints = new Vector<Point>();
				Vector<Integer> possibleFinalVelocityDeterminingSetpointIndexes = new Vector<Integer>();

				for (int i = i1; i < setpointVector.size(); i++) {

					nextSetpoint = setpointVector.get(i);
					if ((traveledInAPositiveDirection && previousPoint.m_x > nextSetpoint.m_x)
							|| (!traveledInAPositiveDirection && previousPoint.m_x < nextSetpoint.m_x)) {
						possibleFinalVelocityDeterminingSetpointIndexes.addElement(i - 1);
						break;
					}

					possibleFinalVelocityDeterminingSetpoints.add(nextSetpoint);
					if (i == i1) {
						continue;
					}

					if (nextSetpoint.maxVelocity >= Key.maxVelocity || nextSetpoint.maxVelocity <= 0.0) {
						nextSetpoint.maxVelocity = Key.maxVelocity;
					} else {
						possibleFinalVelocityDeterminingSetpointIndexes.addElement(i);

					}

					if (Math.abs(nextSetpoint.m_x)
							- Math.abs(setpoint.m_x) > distanceCoveredWhileAcceleratingToMaxVelocity) {
						possibleFinalVelocityDeterminingSetpointIndexes.addElement(i);
						break;
					}

					if (i + 1 == setpointVector.size()) {
						possibleFinalVelocityDeterminingSetpointIndexes.addElement(i);
						break;
					}
					previousPoint = nextSetpoint;

				}
				if (setpoint.m_x == -17.120308093026875 && setpoint.m_x == 1) {
					System.out.println("");
					System.out.println("i1: " + i1);
					for (int i = 0; i < possibleFinalVelocityDeterminingSetpointIndexes.size(); i++) {
						System.out.println(possibleFinalVelocityDeterminingSetpointIndexes.get(i));
					}
					for (int i = 0; i < possibleFinalVelocityDeterminingSetpoints.size(); i++) {
						System.out.println(possibleFinalVelocityDeterminingSetpoints.get(i).m_x);
					}
					System.out.println("");
				}
				for (int i11 = 0; i11 < possibleFinalVelocityDeterminingSetpointIndexes.size(); i11++) {
					Point possibleFinalVelocityDeterminingSetpoint = new Point(0, 0);

					double possibleFinalVelocityDeterminingSetpointMaxVelocity = possibleFinalVelocityDeterminingSetpoints
							.elementAt(possibleFinalVelocityDeterminingSetpointIndexes.elementAt(i11) - i1).maxVelocity;
					try {
						possibleFinalVelocityDeterminingSetpoint = possibleFinalVelocityDeterminingSetpoints
								.elementAt(possibleFinalVelocityDeterminingSetpointIndexes.elementAt(i11) - 1 - i1);
					} catch (ArrayIndexOutOfBoundsException a) {

					}
					double distanceCoveredWhileAcceleratingFrom0ToVi = Math.pow(setpoint.vi, 2)
							/ (2 * Key.maxAcceleration);
					double distaneCoveredWhileAcceleratingFrom0ToVf = Math
							.pow(possibleFinalVelocityDeterminingSetpointMaxVelocity, 2) / (2 * Key.maxAcceleration);
					double deltaDistanceBetweenSetpoints = Math
							.abs(possibleFinalVelocityDeterminingSetpoint.m_x - setpoint.m_x);
					double combinedDistance = deltaDistanceBetweenSetpoints + distanceCoveredWhileAcceleratingFrom0ToVi
							+ Math.abs(deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint)
							+ distaneCoveredWhileAcceleratingFrom0ToVf;

					double maxVelocityDistance = Math.abs(combinedDistance / 2);
					double theoreticalMaxVelocity = Math.sqrt(2 * Key.maxAcceleration * maxVelocityDistance);
					double highestVelocityHitifOnlyAcceleratingToSetpoint = Math.sqrt(Math.pow(setpoint.vi, 2)
							+ 2 * Key.maxAcceleration * Math.abs(setpoint.m_x - previousSetpoint.m_x));
					double highestVelocityHitWhileTravelingToSetpoint;
					double tempVf;
					if (highestVelocityHitifOnlyAcceleratingToSetpoint > theoreticalMaxVelocity) {
						highestVelocityHitWhileTravelingToSetpoint = theoreticalMaxVelocity;
						double distanceTraveledWhileAcceleratingFormViToHighestVelocityHitWhileTravelingToSetpoint = (Math
								.pow(theoreticalMaxVelocity, 2) - Math.pow(setpoint.vi, 2)) / (2 * Key.maxAcceleration);
						double distanceBetweenTheoreticalMaxVelocityAndTempVf = deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint
								- distanceTraveledWhileAcceleratingFormViToHighestVelocityHitWhileTravelingToSetpoint;
						tempVf = Math.sqrt(Math.pow(highestVelocityHitWhileTravelingToSetpoint, 2)
								- 2 * Key.maxAcceleration * distanceBetweenTheoreticalMaxVelocityAndTempVf);
					} else {
						highestVelocityHitWhileTravelingToSetpoint = highestVelocityHitifOnlyAcceleratingToSetpoint;
						tempVf = highestVelocityHitWhileTravelingToSetpoint;
					}

					tempVf = Math.abs(tempVf);

					if (setpoint.vf > tempVf) {
						setpoint.vf = tempVf;
					}
					if (i11 + 1 == possibleFinalVelocityDeterminingSetpointIndexes.size()) {
						possibleFinalVelocityDeterminingSetpoint = possibleFinalVelocityDeterminingSetpoints
								.elementAt(possibleFinalVelocityDeterminingSetpointIndexes.elementAt(i11) - i1);

						deltaDistanceBetweenSetpoints = Math
								.abs(possibleFinalVelocityDeterminingSetpoint.m_x - setpoint.m_x);
						combinedDistance = deltaDistanceBetweenSetpoints + distanceCoveredWhileAcceleratingFrom0ToVi
								+ Math.abs(deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint);
						maxVelocityDistance = Math.abs(combinedDistance / 2);
						theoreticalMaxVelocity = Math.sqrt(2 * Key.maxAcceleration * maxVelocityDistance);
						highestVelocityHitifOnlyAcceleratingToSetpoint = Math.sqrt(Math.pow(setpoint.vi, 2)
								+ 2 * Key.maxAcceleration * Math.abs(setpoint.m_x - previousSetpoint.m_x));

						if (highestVelocityHitifOnlyAcceleratingToSetpoint > theoreticalMaxVelocity) {
							highestVelocityHitWhileTravelingToSetpoint = theoreticalMaxVelocity;
							double distanceTraveledWhileAcceleratingFormViToHighestVelocityHitWhileTravelingToSetpoint = (Math
									.pow(theoreticalMaxVelocity, 2) - Math.pow(setpoint.vi, 2))
									/ (2 * Key.maxAcceleration);
							double distanceBetweenTheoreticalMaxVelocityAndTempVf = deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint
									- distanceTraveledWhileAcceleratingFormViToHighestVelocityHitWhileTravelingToSetpoint;
							tempVf = Math.sqrt(Math.pow(highestVelocityHitWhileTravelingToSetpoint, 2)
									- 2 * Key.maxAcceleration * distanceBetweenTheoreticalMaxVelocityAndTempVf);
						} else {
							highestVelocityHitWhileTravelingToSetpoint = highestVelocityHitifOnlyAcceleratingToSetpoint;
							tempVf = highestVelocityHitWhileTravelingToSetpoint;
						}
						tempVf = Math.abs(tempVf);

						if (setpoint.vf > tempVf) {
							setpoint.vf = tempVf;
						}
						if (setpoint.m_x == -17.120308093026875 && setpoint.m_x == 1) {
							System.out.println("");
							System.out.println("setpoint.m_x: " + setpoint.m_x);
							System.out.println("possibleFinalVelocityDeterminingSetpoint.m_x: "
									+ possibleFinalVelocityDeterminingSetpoint.m_x);
							System.out.println("highestVelocityHitWhileAcceleratingToSetpoint: "
									+ highestVelocityHitifOnlyAcceleratingToSetpoint);
							System.out.println("distanceCoveredWhileacceleratingFrom0ToVi: "
									+ distanceCoveredWhileAcceleratingFrom0ToVi);
							System.out.println("deltaDistanceBetweenSetpoints: " + deltaDistanceBetweenSetpoints);
							System.out.println("deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint: "
									+ deltaDistanceBetweenCurrentSetpointAndPreviousSetpoint);
							System.out.println("combinedDistance: " + combinedDistance);
							System.out.println("maxVelocityDistance: " + maxVelocityDistance);
							System.out.println("theoreticalMaxVelocity: " + theoreticalMaxVelocity);
							System.out.println("possibleFinalVelocityDeterminingSetpoint: "
									+ possibleFinalVelocityDeterminingSetpoint.m_x);
							System.out.println("tempVf: " + tempVf);
							System.out.println("");
						}
					}
				}

			} else {
				setpoint.vf = 0.0;
			}

		}

	}

	/**
	 * This method uses the kinematic equation involving vi, vf, acceleration and
	 * displacement to get distance traveled while accelerating
	 */
	public double getDistanceTraveledWhileAccelerating(double vi, double vf, double maxAcceleration) {
		double distance = Math.abs((Math.pow(vf, 2) - Math.pow(vi, 2)) / (2 * maxAcceleration));
		return distance;
	}

	/**
	 * This method takes a delta time from the beginning of a trajectory path and
	 * returns the point where that time is
	 */
	public TrajectoryPoint getTrajectoryPoint(Vector<TrajectoryPoint> trajectoryPath, double deltaTime) {
		// Creates a point for the point being returned to be stored in
		TrajectoryPoint point = new TrajectoryPoint();

		// This for loop goes through the trajectory vector called trajectoryPath
		for (int i = 0; i < trajectoryPath.size(); i++) {

			// Assigns the point to i
			point = trajectoryPath.get(i);

			// If this point is on or past the deltaTime it is the point being looked for
			// and return that point
			if (point.m_timestamp >= deltaTime) {
				return point;
			}
		}
		return point;
	}

	public TrajectoryPoint getTrajectoryPointWithInterpolation(Path Key, double deltaTimeFromStartOfSetpointVector) {
		double velocity = 0.0;
		double deltaPosition = Double.NaN;
		double time = deltaTimeFromStartOfSetpointVector;
		BeforeWhatTime beforeWhatTime = null;
		Point setpoint = new Point(0,0);
		double previousEndDeltaTimes = 0.0;
		double previousPositions = 0.0;
		for (int i = 0; i < Key.setpointVector.size(); i++) {
			setpoint = Key.setpointVector.get(i);
			if (setpoint.endDeltaTime >= deltaTimeFromStartOfSetpointVector) {
				break;
			}else {
				try {
					Point nextPoint = Key.setpointVector.get(i+1);
				}catch(ArrayIndexOutOfBoundsException a) {
					
					break;
				}
				previousPositions += setpoint.m_x;
				previousEndDeltaTimes += setpoint.endDeltaTime;
			}
		}
		
		double deltaTimeFromSetpoint = deltaTimeFromStartOfSetpointVector - previousEndDeltaTimes;
		
		if (deltaTimeFromSetpoint <= 0) {
			velocity = 0.0;
			deltaPosition = 0.0;

		} else if (deltaTimeFromSetpoint < setpoint.firstStartAccelerationCruisingDeltaTime ) {
			beforeWhatTime = BeforeWhatTime.beforeFirstStartAccelerationCruisingDeltaTime;

			velocity = 0.5 * Key.maxJerk * Math.pow(deltaTimeFromSetpoint, 2);

		} else if (deltaTimeFromSetpoint < setpoint.firstEndAccelerationCruisingDeltaTime) {
			beforeWhatTime = BeforeWhatTime.beforeFirstEndAccelerationCruisingDeltaTime;

			double jerkVelocityCovered = 0.5 * Key.maxJerk
					* Math.pow(setpoint.firstStartAccelerationCruisingDeltaTime, 2);

			double timeCruisingAtMaxAcceleration = deltaTimeFromSetpoint - setpoint.firstStartAccelerationCruisingDeltaTime;
			double velocityCoveredWhileAtMaxAcceleration = timeCruisingAtMaxAcceleration * Key.maxAcceleration;
			velocity = jerkVelocityCovered + velocityCoveredWhileAtMaxAcceleration;

		} else if (deltaTimeFromSetpoint < setpoint.startVelocityCruisingDeltaTime ) {
			beforeWhatTime = BeforeWhatTime.beforeStartVelocityCruisingDeltaTime;

			double firstStartJerkVelocityCovered = setpoint.maxAcceleration / 2
					* setpoint.firstStartAccelerationCruisingDeltaTime;
			double velocityCoveredWhileCruisingAtMaxAcceleration = setpoint.maxAcceleration
					* (setpoint.firstEndAccelerationCruisingDeltaTime
							- setpoint.firstStartAccelerationCruisingDeltaTime);
			double deltaTimeFromFirstEndAccelerationCruising = deltaTimeFromSetpoint
					- setpoint.firstEndAccelerationCruisingDeltaTime;
			double currentAcceleration = setpoint.maxAcceleration - Key.maxJerk * deltaTimeFromFirstEndAccelerationCruising;

			double firstEndJerkVelocityCovered = (Math.pow(setpoint.maxAcceleration, 2) - Math.pow(currentAcceleration, 2))
					/ (2 * Key.maxJerk);

			velocity = firstStartJerkVelocityCovered + velocityCoveredWhileCruisingAtMaxAcceleration
					+ firstEndJerkVelocityCovered;

		} else if (deltaTimeFromSetpoint < setpoint.endVelocityCruisingDeltaTime) {
			beforeWhatTime = BeforeWhatTime.beforeEndVelocityCruisingDeltaTime;

			velocity = setpoint.maxVelocity;

		} else if (deltaTimeFromSetpoint < setpoint.secondStartAccelerationCruisingDeltaTime) {
			beforeWhatTime = BeforeWhatTime.beforeSecondStartAccelerationCruisingDeltaTime;

			double secondEndJerkVelocity = setpoint.maxAcceleration / 2
					* (setpoint.endDeltaTime - setpoint.secondEndAccelerationCruisingDeltaTime);
			double velocityCoveredWhileCruisingAtMaxAcceleration = setpoint.maxAcceleration
					* (setpoint.secondEndAccelerationCruisingDeltaTime
							- setpoint.secondStartAccelerationCruisingDeltaTime);
			double currentAcceleration = setpoint.maxAcceleration
					- Key.maxJerk * (setpoint.secondStartAccelerationCruisingDeltaTime - deltaTimeFromSetpoint);
			double secondStartJerkVelocityCovered = (currentAcceleration + setpoint.maxAcceleration) / 2
					* (setpoint.secondStartAccelerationCruisingDeltaTime - deltaTimeFromSetpoint);
			velocity = secondEndJerkVelocity + velocityCoveredWhileCruisingAtMaxAcceleration
					+ secondStartJerkVelocityCovered;
			/*
			 * if(deltaTime == 10) { System.out.println("");
			 * System.out.println("deltaTime: " + deltaTime);
			 * System.out.println("secondStartJerkVelocity: " +
			 * secondStartJerkVelocityCovered);
			 * System.out.println("velocityCoveredWhileCruisingAtMaxAcceleration: "
			 * +velocityCoveredWhileCruisingAtMaxAcceleration);
			 * System.out.println("secondEndJerkVelocityCovered: " + secondEndJerkVelocity);
			 * System.out.println("startJerkVelocityCovered: " + startJerkVelocityCovered);
			 * System.out.println("");
			 * 
			 * }
			 */
		} else if (deltaTimeFromSetpoint < setpoint.secondEndAccelerationCruisingDeltaTime) {
			beforeWhatTime = BeforeWhatTime.beforeSecondEndAccelerationCruisingDeltaTime;

			double secondStartJerkVelocity = Key.maxAcceleration / 2
					* (setpoint.endDeltaTime - setpoint.secondEndAccelerationCruisingDeltaTime);
			double velocityCoveredWhileAtMaxAcceleration = Key.maxAcceleration
					* (setpoint.secondEndAccelerationCruisingDeltaTime - deltaTimeFromSetpoint);
			velocity = secondStartJerkVelocity + velocityCoveredWhileAtMaxAcceleration;

		} else if (deltaTimeFromSetpoint <= setpoint.endDeltaTime + previousEndDeltaTimes) {
			beforeWhatTime = BeforeWhatTime.beforeEndDeltaTime;

			velocity = 0.5 * Math.pow((setpoint.endDeltaTime - deltaTimeFromSetpoint), 2) * Key.maxJerk;

		} else {
			velocity = 0.0;
			beforeWhatTime = BeforeWhatTime.afterEndDeltaTime;
		}
		if (Double.isNaN(deltaPosition)) {
			deltaPosition = getPosition(setpoint, deltaTimeFromSetpoint, Key.maxJerk, setpoint.maxAcceleration, beforeWhatTime);
		}
		double directionConstant = 1.0;

		Point previousSetpoint = new Point(0, 0);
		try {
			previousSetpoint = Key.setpointVector.get(-1);
		} catch (ArrayIndexOutOfBoundsException a) {

		}
		if (previousSetpoint.m_x > setpoint.m_x) {
			directionConstant = -1;
		} else {
			directionConstant = 1;
		}

		velocity *= directionConstant;
		deltaPosition *= directionConstant;
		double position = previousPositions + deltaPosition;
		TrajectoryPoint point = new TrajectoryPoint(velocity, position, time);
		return point;

	}

	private enum BeforeWhatTime {
		beforeFirstStartAccelerationCruisingDeltaTime, beforeFirstEndAccelerationCruisingDeltaTime, beforeStartVelocityCruisingDeltaTime, beforeEndVelocityCruisingDeltaTime, beforeSecondStartAccelerationCruisingDeltaTime, beforeSecondEndAccelerationCruisingDeltaTime, beforeEndDeltaTime, afterEndDeltaTime
	}

	private double getPosition(Point setpoint, double deltaTime, double maxJerk, double maxAcceleration,
			BeforeWhatTime beforeWhatTime) {
		double position = 0.0;
		double time;
		if(deltaTime == 13.0) {
		
		}
		switch (beforeWhatTime) {
		
		case afterEndDeltaTime:

		case beforeEndDeltaTime:
			
			if (deltaTime < setpoint.endDeltaTime) {
				time = deltaTime - setpoint.secondEndAccelerationCruisingDeltaTime;
			} else {
				time = setpoint.endDeltaTime - setpoint.secondEndAccelerationCruisingDeltaTime;
			}
			double beforeEndDeltaTimeJerkVelocityCovered = maxAcceleration / 2
					* (setpoint.endDeltaTime - setpoint.secondEndAccelerationCruisingDeltaTime);

			position += beforeEndDeltaTimeJerkVelocityCovered * time
					+ 0.5 * (-1.0 * maxAcceleration) * Math.pow(time, 2)
					+ (1.0 / 6.0) * (1.0 * maxJerk) * Math.pow(time, 3);
			
			
			
		case beforeSecondEndAccelerationCruisingDeltaTime:
			if (deltaTime < setpoint.secondEndAccelerationCruisingDeltaTime) {
				time = deltaTime - setpoint.secondStartAccelerationCruisingDeltaTime;
			} else {
				time = setpoint.secondEndAccelerationCruisingDeltaTime
						- setpoint.secondStartAccelerationCruisingDeltaTime;
			}
			double secondStartAccelerationCruisingJerkVelocityCovered = maxAcceleration / 2
					* (setpoint.secondStartAccelerationCruisingDeltaTime - setpoint.endVelocityCruisingDeltaTime);
			double beforeSecondStartAccelerationCruisingVelocityCovered = setpoint.maxVelocity
					- secondStartAccelerationCruisingJerkVelocityCovered;

			double secondDistanceCoveredWhileAtMaxAcceleration = beforeSecondStartAccelerationCruisingVelocityCovered
					* time - 0.5 * maxAcceleration * Math.pow(time, 2);
			position += secondDistanceCoveredWhileAtMaxAcceleration;
			
		case beforeSecondStartAccelerationCruisingDeltaTime:
			if (deltaTime < setpoint.secondStartAccelerationCruisingDeltaTime) {
				time = deltaTime - setpoint.endVelocityCruisingDeltaTime;
			} else {
				time = setpoint.secondStartAccelerationCruisingDeltaTime - setpoint.endVelocityCruisingDeltaTime;
			}

			position += setpoint.maxVelocity * time + (1.0 / 6.0) * (-1 * maxJerk) * Math.pow(time, 3);
			if (deltaTime == -3.174802103936399) {
				System.out.println("beforeSecondStartAccelerationCruisingDeltaTime");
				System.out.println("position: " + position);
				System.out.println("Adding: " + (setpoint.maxVelocity * time + (1.0 / 6.0) * (-1 * maxJerk) * Math.pow(time, 3)));
				System.out.println("");
			}
		case beforeEndVelocityCruisingDeltaTime:
			if (deltaTime < setpoint.endVelocityCruisingDeltaTime) {
				time = deltaTime - setpoint.startVelocityCruisingDeltaTime;
			} else {
				time = setpoint.endVelocityCruisingDeltaTime - setpoint.startVelocityCruisingDeltaTime;
			}

			position += setpoint.maxVelocity * time;
			if (deltaTime == -3.174802103936399) {
				System.out.println("beforeEndVelocityCruisingDeltaTime");
				System.out.println("position: " + position);
				System.out.println("Adding: " + (setpoint.maxVelocity * time));
				System.out.println("");
			}
		case beforeStartVelocityCruisingDeltaTime:
			if (deltaTime < setpoint.startVelocityCruisingDeltaTime) {
				time = deltaTime - setpoint.firstEndAccelerationCruisingDeltaTime;
			} else {
				time = setpoint.startVelocityCruisingDeltaTime - setpoint.firstEndAccelerationCruisingDeltaTime;
			}

			double beforeStartVelocityCruisingJerkVelocityCovered = 0.5 * maxJerk
					* Math.pow(setpoint.firstStartAccelerationCruisingDeltaTime, 2);
			double maxAccelerationCruisingTime = setpoint.firstEndAccelerationCruisingDeltaTime
					- setpoint.firstStartAccelerationCruisingDeltaTime;
			double velocityAtFirstEndAccelerationCruisingDeltaTime = beforeStartVelocityCruisingJerkVelocityCovered
					+ maxAcceleration * maxAccelerationCruisingTime;

			position += (velocityAtFirstEndAccelerationCruisingDeltaTime * time
					+ 0.5 * maxAcceleration * Math.pow(time, 2) + (1.0 / 6.0) * (-1 * maxJerk) * Math.pow(time, 3));
			if (deltaTime == -3.174802103936399) {
				System.out.println("beforeStartVelocityCruisingDeltaTime");
				System.out.println("position: " + position);
				System.out.println("Adding: " + (velocityAtFirstEndAccelerationCruisingDeltaTime * time
						+ 0.5 * maxAcceleration * Math.pow(time, 2) + (1.0 / 6.0) * (-1 * maxJerk) * Math.pow(time, 3)));
				System.out.println("velocityAtFirstEndAccelerationCruisingDeltaTime: " + velocityAtFirstEndAccelerationCruisingDeltaTime);
				System.out.println("maxAcceleration: " + maxAcceleration);
				System.out.println("");
				System.out.println("");
			}
		case beforeFirstEndAccelerationCruisingDeltaTime:
			if (deltaTime < setpoint.firstEndAccelerationCruisingDeltaTime) {
				time = deltaTime - setpoint.firstStartAccelerationCruisingDeltaTime;
			} else {
				time = setpoint.firstEndAccelerationCruisingDeltaTime
						- setpoint.firstStartAccelerationCruisingDeltaTime;
			}
			double startAccelerationVi = maxAcceleration / 2 * (setpoint.firstStartAccelerationCruisingDeltaTime);
			double distanceCovered = startAccelerationVi * time + 0.5 * maxAcceleration * Math.pow(time, 2);

			position += distanceCovered;
			if (deltaTime == -3.174802103936399) {
				System.out.println("beforeFirstEndAccelerationCruisingDeltaTime");
				System.out.println("position: " + position);
				System.out.println("Adding: " + (distanceCovered));
				System.out.println("");
			}
		case beforeFirstStartAccelerationCruisingDeltaTime:
			if (deltaTime < setpoint.firstStartAccelerationCruisingDeltaTime) {
				time = deltaTime;
			} else {
				time = setpoint.firstStartAccelerationCruisingDeltaTime;

			}
			position += (1.0 / 6.0) * maxJerk * Math.pow(time, 3);
			if (deltaTime == -3.174802103936399) {
				System.out.println("beforeFirstStartAccelerationCruisingDeltaTime");
				System.out.println("position: " + position);
				System.out.println("Adding: " + (1.0 / 6.0) * maxJerk * Math.pow(time, 3));
				System.out.println("");
			}
		}
		return position;
	}

}
