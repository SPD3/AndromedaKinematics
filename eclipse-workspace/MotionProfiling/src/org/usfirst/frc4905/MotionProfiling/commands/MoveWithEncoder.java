// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4905.MotionProfiling.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import kinematics.KinematicsSimpler;
import kinematics.KinematicsSimpler.*;

import java.util.Vector;

import org.usfirst.frc4905.MotionProfiling.Robot;

import Utilities.Trace;

/**
 *
 */
public class MoveWithEncoder extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	// org.usfirst.frc.team4905.robot.Robot
	Path m_path;
	double timeThruLoop = 0.0;
	double m_initialTimeStamp;
	double m_currentTimeStamp;
	double deltaTime;
	double m_velocityToMotorOutputRatio;
	double m_accelerationToMotorOutputRatio;
	double m_PIDOut;
	double m_positionToEncoderRevolutionsRatio = 5.0;
	double m_initialEncoderPosition;
	KinematicsSimpler m_kinematicsSimpler = new KinematicsSimpler();

	KinematicsSimpler.TrajectoryPoint currentTrajectoryPoint = Robot.kinematicsSimpler.new TrajectoryPoint();
	KinematicsSimpler.TrajectoryPoint nextTrajectoryPoint = Robot.kinematicsSimpler.new TrajectoryPoint();

	Vector<String> m_header = new Vector<String>();

	public MoveWithEncoder() {

	}
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	public MoveWithEncoder(Path path) {
		m_path = path;
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		
		Robot.driveTrain.setControlModeSpeed();

		m_velocityToMotorOutputRatio = 1.0 / m_path.getMaxVelocity();
		m_accelerationToMotorOutputRatio = 1.0 / m_path.getMaxAcceleration();
		m_initialTimeStamp = Timer.getFPGATimestamp();
		Robot.driveTrain.initializePositionPID();
		Vector<String> header = new Vector<String>();
		header.add(new String("ActualVelocity"));
		header.add(new String("ProjectedVelocity"));
		header.add(new String("ActualPosition"));
		header.add(new String("ProjectedPosition"));
		
		header.addElement(new String("Error"));
		header.add(new String("Zero"));
		header.add(new String("D Term"));
		Trace.getInstance().addTrace("MoveWithEncoderData", header);
		m_header = header;
		m_initialTimeStamp = Timer.getFPGATimestamp();
		m_initialEncoderPosition = Robot.driveTrain.getEncoderPosition();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		
		Vector<Double> entry = new Vector<Double>();
		currentTrajectoryPoint = nextTrajectoryPoint;
		m_currentTimeStamp = Timer.getFPGATimestamp();
		deltaTime = m_currentTimeStamp - m_initialTimeStamp;
		nextTrajectoryPoint = Robot.kinematicsSimpler.getTrajectoryPointWithInterpolation(m_path,
				(deltaTime / 60));
		
		m_PIDOut = Robot.driveTrain.getPositionPIDOut(currentTrajectoryPoint.m_position + m_initialEncoderPosition);
		entry.add(Robot.driveTrain.getVelocity());
		entry.add(currentTrajectoryPoint.m_currentVelocity);
		entry.add((Robot.driveTrain.getEncoderPosition() - m_initialEncoderPosition));
		entry.add(currentTrajectoryPoint.m_position);
		entry.addElement((currentTrajectoryPoint.m_position-(Robot.driveTrain.getEncoderPosition() - m_initialEncoderPosition))*100);
		entry.add(0.0);
		entry.add(Robot.driveTrain.getDTerm()*10);
		Trace.getInstance().addEntry("MoveWithEncoderData", entry);
		Robot.driveTrain.setAllDriveControllers((nextTrajectoryPoint.m_currentVelocity) + m_PIDOut);
		
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.setAllDriveControllers(0.0);
		Trace.getInstance().flushTraceFiles();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
